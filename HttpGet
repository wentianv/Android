//从服务器端获取数据
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;

import android.app.Activity;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;

public class MainActivity extends Activity {

	private String path = "http://192.168.0.105:8080/Oks/test.jsp";
	private Handler handler = null;
	private ImageView img;
	private Button btn;
	private TextView tv;
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		img = (ImageView) this.findViewById(R.id.img);
		btn = (Button) this.findViewById(R.id.btn);
		tv = (TextView) this.findViewById(R.id.tv);
		handler = new Handler(){
			@Override
			public void handleMessage(Message msg) {
				switch (msg.what) {
				case 1:
					//img.setImageBitmap((Bitmap)msg.obj);
					tv.setText(msg.obj.toString());
					break;
				default:
					break;
				}
			}
		};
		btn.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				new Thread(){
					public void run() {
						// Bitmap img = getBitmapFromUrl(path);
						String html = getHtmlFromUrl(path);
						Message msg = Message.obtain();
						msg.what=1;
						msg.obj = html;
						handler.sendMessage(msg);
					}
				}.start();
			}
		});
	}
	private String getHtmlFromUrl(String path){
		HttpURLConnection con = null;
		try {
			URL url = new URL(path);
			if(url!=null){
				con = (HttpURLConnection) url.openConnection();
				
				con.setConnectTimeout(3000);//设置网络的超时时间
				con.setDoInput(true);//打开输入流
				
				con.setRequestMethod("GET");//设置请求方式
				int code = con.getResponseCode();
				if(code==200){
					InputStream in = con.getInputStream();//读到一个输入流
					String html = getStringFromStream(in);
					in.close();
					return html;
				}else{ 	
					System.out.println("连接失败:"+code);	
				}
			}		
		} catch (Exception e) {
			e.printStackTrace();
		}finally{
			if(con!=null){
				con.disconnect();
			}
		}
		return "";	
	}

	private String getStringFromStream(InputStream in) throws IOException{
		ByteArrayOutputStream bos = new ByteArrayOutputStream();
		byte[] buf = new byte[1024];
		int count = 0;
		while((count=in.read(buf))!=-1){
			bos.write(buf,0,count);
		}
		in.close();
		String html = bos.toString();
		//统一编码
		String charset = "utf-8";
		if(html.contains("gbk") || html.contains("GBK") || html.contains("gb2312") || html.contains("GB2312")){
			charset = "gbk";
		}
		html = new String(bos.toByteArray(),charset);
		return html;
	}
	
	private Bitmap getBitmapFromUrl(String path){
		HttpURLConnection con = null;
		try {
			URL url = new URL(path);
			con = (HttpURLConnection) url.openConnection();
			
			con.setRequestMethod("GET");//设置请求的方法
			con.setConnectTimeout(20000);//设置连接超时的时间
			con.setDoInput(true);
			//con.setReadTimeout(10000);//设置读取超时的时间
			
			con.connect();//开始连接
			int code = con.getResponseCode();//获取响应码
			if(code == 200){
				//连接成功，读取输入流
				InputStream in = con.getInputStream();
				Bitmap bitmap = BitmapFactory.decodeStream(in);
				in.close();
				return bitmap;
			}else{
				System.out.println("连接失败,code:"+code);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}finally{
			if(con!=null)
				con.disconnect();//断开连接
		}
		return null;
	}
}

